package main

import (
	"fmt"
	"testing"
)

func TestForDebugging(t *testing.T) {
	reqDnsBinary := []byte{0xD3, 0x35, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x61, 0x62, 0x63, 0x11, 0x6C, 0x6F, 0x6E, 0x67, 0x61, 0x73, 0x73, 0x64, 0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0x03, 0x64, 0x65, 0x66, 0xC0, 0x10, 0x00, 0x01, 0x00, 0x01}
	// reqDnsBinary :=[]byte{0xD3, 0x35, 0x81, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x61, 0x62, 0x63, 0x11, 0x6C, 0x6F, 0x6E, 0x67, 0x61, 0x73, 0x73, 0x64, 0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0x03, 0x64, 0x65, 0x66, 0x11, 0x6C, 0x6F, 0x6E, 0x67, 0x61, 0x73, 0x73, 0x64, 0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0x03, 0x61, 0x62, 0x63, 0x11, 0x6C, 0x6F, 0x6E, 0x67, 0x61, 0x73, 0x73, 0x64, 0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x04, 0x00, 0x04, 0x38, 0x38, 0x38, 0x38, 0x03, 0x64, 0x65, 0x66, 0x11, 0x6C, 0x6F, 0x6E, 0x67, 0x61, 0x73, 0x73, 0x64, 0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x04, 0x00, 0x04, 0x38, 0x38, 0x38, 0x38}

	reqDns := ParseDNS(reqDnsBinary)

	fmt.Printf("Dns id is: %d\n", reqDns.Header.Id)
	for i := 0; i < int(reqDns.Header.QDCount); i++ {
		fmt.Printf("req Name [%d] is: %s\n", i, reqDns.Questions[i].Name)
	}

	var rCode uint8
	if reqDns.Header.OPCode == 0 {
		rCode = 0
	} else {
		rCode = 4
	}

	dns := newDNS()
	dns.Header.Id = reqDns.Header.Id
	dns.Header.OPCode = reqDns.Header.OPCode
	dns.Header.RD = reqDns.Header.RD
	dns.Header.RCode = rCode
	dns.AsQuery()

	for i := 0; i < int(reqDns.Header.QDCount); i++ {
		domain := reqDns.Questions[i].Name
		dns.AddQuestion(domain, TypeA, ClassIN)
	}

	for i := 0; i < int(reqDns.Header.QDCount); i++ {
		domain := reqDns.Questions[i].Name
		dns.AddResourceRecord(domain, TypeA, ClassIN, 60, "8.8.8.8")
	}

	for i := 0; i < int(dns.Header.QDCount); i++ {
		fmt.Printf("dns q Name [%d] is: %s\n", i, dns.Questions[i].Name)
	}

	for i := 0; i < int(dns.Header.ANCount); i++ {
		fmt.Printf("dns rr Name [%d] is: %s\n", i, dns.ResourceRecords[i].Name)
	}

	fmt.Printf("Resp bin:\n%s\n",literalFormat(dns.Serialize()))
}
